# This file is a part of Kurt McKee's GitHub Workflows project.
# https://github.com/kurtmckee/github-workflows
# Copyright 2024 Kurt McKee <contactme@kurtmckee.org>
# SPDX-License-Identifier: MIT

on:
  workflow_call:
    inputs:
      config:
        description: |
          The configuration object.
        required: true
        type: "string"

jobs:
  tox:
    name: "tox"
    runs-on: "${{ fromJSON(inputs.config).runner }}"
    steps:
      - name: "Export config"
        id: "config-exporter"
        shell: "bash"
        # Loading the input from an environment variable avoids injection attacks.
        env:
          inputs_config: "${{ inputs.config }}"
        run: |
          echo "$inputs_config" > "${RUNNER_TEMP}/tox-config.raw.json"

      # If a previous workflow run successfully validated an identical config object,
      # a cache hit is sufficient to demonstrate that no further validation is required.
      - name: "Look up config cache"
        id: "lookup-config-cache"
        uses: "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9" # v4.0.2
        with:
          lookup-only: true
          path: "${{ format('{0}/tox-config.raw.json', runner.temp) }}"
          key: "config-${{ hashFiles(format('{0}/tox-config.raw.json', runner.temp)) }}"

      - name: "Write schema"
        if: "steps.lookup-config-cache.outputs.cache-hit == false"
        shell: "bash"
        env:
          tox_schema: |
            # START: tox-schema.json
            {
              "$schema": "https://json-schema.org/draft-07/schema",
              "type": "object",
              "required": [
                "runner"
              ],
              "properties": {
                "runner": {
                  "type": "string",
                  "minLength": 1
                },
                "tox-environments": {
                  "$comment": "A list of tox environments to run.",
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "tox-pre-environments": {
                  "$comment": "A list of tox environments to run before all installed Python interpreter versions.",
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "tox-post-environments": {
                  "$comment": "A list of tox environments to run after all installed Python interpreter versions.",
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "cpythons": {
                  "$comment": "A list of CPython interpreter versions. Typically, the *last version* listed will be the default Python interpreter when 'python' is invoked, and will be the version used when installing and executing tox.",
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "cpython-beta": {
                  "$comment": "A CPython version to install as a beta. Unless the 'cpythons' list is empty, this version will never be the default Python interpreter.",
                  "type": "string",
                  "minLength": 3
                },
                "pypys": {
                  "$comment": "A list of PyPy interpreter versions.",
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "cache-key-prefix": {
                  "$comment": "A prefix to use with the cached environment key.",
                  "type": "string",
                  "minLength": 1,
                  "default": "tox"
                },
                "cache-key-hash-files": {
                  "$comment": "An additional path pattern that will be added to the list of paths to include when hashing files for cache-busting.",
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "cache-paths": {
                  "$comment": "Additional paths to cache. Any paths specified here will be added to the default list: '.venv/' and '.tox/'.",
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              },
              "allOf": [
                {
                  "$comment": "At least one Python interpreter must be present.",
                  "anyOf": [
                    {"required": ["cpythons"]},
                    {"required": ["cpython-beta"]},
                    {"required": ["pypys"]}
                  ]
                },
                {
                  "if": {"required": ["tox-environments"]},
                  "then": {
                    "allOf": [
                      {
                        "$comment": "tox-environments is mutually exclusive with tox-pre-environments.",
                        "not": {"required": ["tox-pre-environments"]}
                      },
                      {
                        "$comment": "tox-environments is mutually exclusive with tox-post-environments.",
                        "not": {"required": ["tox-post-environments"]}}
                    ]
                  }
                }
              ]
            }
            # END: tox-schema.json
        run: |
          # Due to the architecture of the source code synchronization code,
          # the START and END lines in the JSON schema above must be removed.
          echo "${tox_schema}" | grep -ve '^#' > "${RUNNER_TEMP}/tox-schema.json"

      - name: "Setup Python for validation"
        if: "steps.lookup-config-cache.outputs.cache-hit == false"
        uses: "actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3" # v5.2.0
        with:
          python-version: "3.12"

      - name: "Validate the config against the schema"
        if: "steps.lookup-config-cache.outputs.cache-hit == false"
        shell: "bash"
        run: |
          pip install --target="${RUNNER_TEMP}/check-jsonschema" check-jsonschema
          PYTHONPATH="${RUNNER_TEMP}/check-jsonschema" "${RUNNER_TEMP}/check-jsonschema/bin/check-jsonschema" --schemafile "${RUNNER_TEMP}/tox-schema.json" "${RUNNER_TEMP}/tox-config.raw.json"

      - name: "Transform config"
        id: "config-transformer"
        shell: "python"
        run: |
          # START: tox_config_transformer.py
          import json
          import os
          import pathlib
          import typing


          def transform_config(config: dict[str, typing.Any]):
              # Transform the tox environments for convenience.
              # pre- and post-environments will be assembled into "tox-environments",
              # together with a full list of CPython and PyPy interpreter versions.
              # Since these keys are mutually-exclusive with "tox-environments",
              # no config data are lost in this transformation.
              if {"tox-pre-environments", "tox-post-environments"} & config.keys():
                  environments = config.pop("tox-pre-environments", [])
                  environments.extend(f"py{version}" for version in config.get("cpythons", []))
                  if "cpython-beta" in config:
                      environments.append(f"py{config['cpython-beta']}")
                  environments.extend(f"pypy{version}" for version in config.get("pypys", []))
                  environments.extend(config.pop("tox-post-environments", []))
                  config["tox-environments"] = environments


          def main() -> None:
              # Load
              runner_temp = pathlib.Path(os.environ["RUNNER_TEMP"])
              raw_config_path = runner_temp / "tox-config.raw.json"
              config = json.loads(raw_config_path.read_text())

              # Transform in-place
              transform_config(config)

              # Write
              output = json.dumps(config, sort_keys=True, separators=(",", ":"))
              with open(os.environ["GITHUB_ENV"], "a") as file:
                  file.write(f"tox-config={output}")
              (runner_temp / "tox-config.json").write_text(output)


          if __name__ == "__main__":
              main()
          # END: tox_config_transformer.py

      - name: "Checkout the repository"
        uses: "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332" # v4.1.7

      - name: "Calculate additional checksums"
        if: "fromJSON(env.tox-config).cache-key-hash-files"
        shell: "bash"
        env:
          FILE_PATTERNS: "${{ join(fromJSON(env.tox-config).cache-key-hash-files, ' ') }}"
        run: |
          # shellcheck disable=SC2086
          for pattern in $FILE_PATTERNS; do
              if ! ${{ runner.os == 'macOS' && 'shasum -a 1' || 'sha1sum' }} $pattern >> '.hash-files.sha'; then
                  echo "The cache-key-hash-files pattern '$pattern' matched nothing"
                  exit 1
              fi
          done
          cat .hash-files.sha

      - name: "Setup Pythons"
        uses: "actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3" # v5.2.0
        env:
          # PyPy on macOS may warn about old pip versions during installation.
          PIP_DISABLE_PIP_VERSION_CHECK: "1"
        with:
          # Python interpreter versions are ordered:
          #
          # * PyPy versions
          # * CPython beta version
          # * CPython versions
          #
          python-version: "${{
              format(
                '{0}{1}{2}',
                fromJSON(env.tox-config).pypys && format('pypy{0}\n', join(fromJSON(env.tox-config).pypys, '\npypy')) || '',
                fromJSON(env.tox-config).cpython-beta && format('{0}\n', fromJSON(env.tox-config).cpython-beta ) || '',
                fromJSON(env.tox-config).cpythons && join(fromJSON(env.tox-config).cpythons, '\n') || ''
              )
            }}"
          allow-prereleases: true

      - name: "Detect Pythons"
        uses: "kurtmckee/detect-pythons@38187a5464f266e93e5c1467699f7be2bf521d2e" # v1.1.0

      - name: "Write the workflow config"
        shell: "bash"
        run: |
          cat << 'EOF' > .tox-config.json
          ${{ env.tox-config }}
          EOF

      - name: "Restore cache"
        id: "restore-cache"
        uses: "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9" # v4.0.2
        with:
          path: |
            .tox/
            .venv/
            ${{ fromJSON(env.tox-config).cache-paths && join(fromJSON(env.tox-config).cache-paths, '\n') }}
          key: "${{
            format(
              '{0}-os={1}-hash={2}',
              fromJSON(env.tox-config).cache-key-prefix || 'tox',
              fromJSON(env.tox-config).runner,
              hashFiles(
                '.python-identifiers',
                format('{0}/tox-config.json', runner.temp),
                'tox.ini',
                fromJSON(env.tox-config).cache-key-hash-files && '.hash-files.sha' || ''
              )
            )
          }}"

      - name: "Identify .venv path"
        shell: "bash"
        run: |
          echo 'venv-path=.venv/${{ runner.os == 'Windows' && 'Scripts' || 'bin' }}' >> "$GITHUB_ENV"

      - name: "Create a virtual environment"
        if: "steps.restore-cache.outputs.cache-hit == false"
        run: |
          python -m venv .venv
          ${{ env.venv-path }}/python -m pip install --upgrade pip setuptools wheel
          ${{ env.venv-path }}/pip install tox

      - name: "Run the test suite"
        run: |
          ${{ env.venv-path }}/tox run --colored yes ${{ fromJSON(env.tox-config).tox-environments && format('-e "{0}"', join(fromJSON(env.tox-config).tox-environments, ',')) }}
